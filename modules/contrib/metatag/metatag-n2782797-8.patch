diff --git a/metatag_fine_grained_perms/README.md b/metatag_fine_grained_perms/README.md
new file mode 100644
index 0000000..4610904
--- /dev/null
+++ b/metatag_fine_grained_perms/README.md
@@ -0,0 +1,20 @@
+Metatag Fine Grained Permissions
+--------------------------------
+This add-on to Metatag creates a new permission for each individual meta tag,
+allowing for very fine controlled access over meta tag customization.
+
+
+Usage
+--------------------------------------------------------------------------------
+* Enable the Metatag Fine Grained Permissions module.
+* Assign the appropriate permissions via the admin/people/permisisons page.
+
+
+Credits / contact
+--------------------------------------------------------------------------------
+Originally written by Michael Petri [1].
+
+
+References
+--------------------------------------------------------------------------------
+1: https://www.drupal.org/u/michaelpetri
diff --git a/metatag_fine_grained_perms/metatag_fine_grained_perms.info.yml b/metatag_fine_grained_perms/metatag_fine_grained_perms.info.yml
new file mode 100644
index 0000000..e8eb2d8
--- /dev/null
+++ b/metatag_fine_grained_perms/metatag_fine_grained_perms.info.yml
@@ -0,0 +1,7 @@
+name: Metatag Fine Grained Permissions
+type: module
+description: Adds individual permissions for each meta tag, allowing for fine-grained access to the meta tags.
+core: 8.x
+package: SEO
+dependencies:
+  - metatag
diff --git a/metatag_fine_grained_perms/metatag_fine_grained_perms.module b/metatag_fine_grained_perms/metatag_fine_grained_perms.module
new file mode 100644
index 0000000..dde00d1
--- /dev/null
+++ b/metatag_fine_grained_perms/metatag_fine_grained_perms.module
@@ -0,0 +1,34 @@
+<?php
+
+/**
+ * @file
+ * Contains metatag_fine_grained_perms.module..
+ */
+
+use Drupal\Core\Form\FormStateInterface;
+use Drupal\Core\Render\Element;
+use Drupal\metatag\Plugin\Field\FieldWidget\MetatagFirehose;
+
+/**
+ * Implements hook_field_widget_form_alter().
+ */
+function metatag_fine_grained_perms_field_widget_form_alter(&$element, FormStateInterface $form_state, $context) {
+  if ($context['widget'] instanceof MetatagFirehose) {
+    foreach (Element::children($element) as $group_id) {
+      // By default restrict access to group and regain access when user has
+      // access to at least one tag in group to prevent displaying empty groups.
+      $element[$group_id]['#access'] = FALSE;
+
+      foreach (Element::children($element[$group_id]) as $tag_id) {
+        // Check tag permission.
+        $element[$group_id][$tag_id]['#access'] = \Drupal::currentUser()
+          ->hasPermission('access metatag tag ' . $group_id . '__' . $tag_id);
+
+        // Make group accessible if user has access to tag.
+        if ($element[$group_id][$tag_id]['#access']) {
+          $element[$group_id]['#access'] = TRUE;
+        }
+      }
+    }
+  }
+}
diff --git a/metatag_fine_grained_perms/metatag_fine_grained_perms.permissions.yml b/metatag_fine_grained_perms/metatag_fine_grained_perms.permissions.yml
new file mode 100644
index 0000000..608b61b
--- /dev/null
+++ b/metatag_fine_grained_perms/metatag_fine_grained_perms.permissions.yml
@@ -0,0 +1,2 @@
+permission_callbacks:
+  - Drupal\metatag_fine_grained_perms\MetatagPermissions::permissions
diff --git a/metatag_fine_grained_perms/src/MetatagPermissions.php b/metatag_fine_grained_perms/src/MetatagPermissions.php
new file mode 100644
index 0000000..3dbe422
--- /dev/null
+++ b/metatag_fine_grained_perms/src/MetatagPermissions.php
@@ -0,0 +1,81 @@
+<?php
+
+namespace Drupal\metatag_fine_grained_perms;
+
+use Drupal\Core\DependencyInjection\ContainerInjectionInterface;
+use Drupal\Core\StringTranslation\StringTranslationTrait;
+use Drupal\metatag\MetatagGroupPluginManager;
+use Drupal\metatag\MetatagTagPluginManager;
+use Symfony\Component\DependencyInjection\ContainerInterface;
+
+/**
+ * Provides dynamic permissions for the Metatag module.
+ *
+ * @see metatag_fine_grained_perms.permissions.yml
+ */
+class MetatagPermissions implements ContainerInjectionInterface {
+
+  use StringTranslationTrait;
+
+  /**
+   * The Metatag Tag Plugin Manager.
+   *
+   * @var \Drupal\metatag\MetatagTagPluginManager
+   */
+  protected $tagManager;
+
+  /**
+   * The Metatag Group Plugin Manager.
+   *
+   * @var \Drupal\metatag\MetatagGroupPluginManager
+   */
+  protected $groupManager;
+
+  /**
+   * Constructs a MetatagPermissions instance.
+   *
+   * @param \Drupal\metatag\MetatagTagPluginManager $tag_manager
+   * @param \Drupal\metatag\MetatagGroupPluginManager $group_manager
+   */
+  public function __construct(MetatagTagPluginManager $tag_manager, MetatagGroupPluginManager $group_manager) {
+    $this->tagManager = $tag_manager;
+    $this->groupManager = $group_manager;
+  }
+
+  /**
+   * {@inheritdoc}
+   */
+  public static function create(ContainerInterface $container) {
+    return new static(
+      $container->get('plugin.manager.metatag.tag'),
+      $container->get('plugin.manager.metatag.group')
+    );
+  }
+
+  /**
+   * Get metatag tag permissions.
+   *
+   * @return array
+   *   Permissions array.
+   */
+  public function permissions() {
+    $permissions = [];
+
+    // Build permissions for each tag in each group.
+    foreach ($this->tagManager->getDefinitions() as $metatag) {
+      $group = $this->groupManager->getDefinition($metatag['group']);
+
+      $permissions += [
+        'access metatag tag ' . $metatag['group'] . '__' . $metatag['name'] => [
+          'title' => $this->t('Access %tag in %group', [
+            '%tag' => $metatag['label'],
+            '%group' => $group['label'],
+          ]),
+        ],
+      ];
+    }
+
+    return $permissions;
+  }
+
+}
